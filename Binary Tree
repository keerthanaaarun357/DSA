#include <stdio.h>
#include <stdlib.h>

struct node
{
  int item;
  struct node *left;
  struct node *right;
};

void inorder(struct node *root)
{
  if(root == NULL)
  {
    return; 
  }
  inorder(root->left);
  printf(" %d ", root->item);
  inorder(root->right);
}

void preorder(struct node *root)
{
  if(root == NULL)
  {
    return; 
  }
  printf(" %d ", root->item);
  preorder(root->left);
  preorder(root->right);
}

void postorder(struct node *root)
{
  if(root == NULL)
  {
    return; 
  }
  preorder(root->left);
  preorder(root->right);
  printf(" %d ", root->item);
}

struct node *create(int value)
{
  struct node *new = (struct node *)malloc(sizeof(struct node));
  new->item = value;
  new->left = NULL;
  new->right = NULL;
  return new;
};

struct node *inLeft(struct node *root, int value)
{
  root->left = create(value);
  return root->left;
};

struct node *inRight(struct node *root, int value)
{
  root->right = create(value);
  return root->right;
};

int main()
{
  struct node *root = create(1);
  inLeft(root, 2);
  inRight(root, 3);
  inLeft(root->left, 4);
  inLeft(root->right, 5);
  inRight(root->left, 6);
  printf("\n Inorder Traversal : \n");
  inorder(root);
  printf("\n Preorder Traversal : \n");
  preorder(root);
  printf("\n Postorder Traversal : \n");
  postorder(root);
}
